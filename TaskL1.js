// ### Задания по Java: Введение и Основы

// 1. **Введение в язык программирования Java:**

// 2. **Почему стоит изучать язык программирования Java:**
//    - Какие преимущества предоставляет Java, и почему ее стоит изучать?
//    - Каковы основные характеристики языка программирования Java?
// - **Массовое использование**: Java широко используется компаниями и организациями по всему миру.
// - **Поддержка независимой платформы**: Принцип "Write once, run anywhere" позволяет запускать программы на различных платформах.
// - **Дополнительные возможности**: Java предоставляет богатые библиотеки и фреймворки.
// - **Надежность и безопасность**: Java уделяет большое внимание безопасности и конфиденциальности.

// 3. **История языка программирования Java:**
//    - Какие важные этапы в истории развития Java можно выделить?
// В 1995 году его создали, а затем переименовали с Oak на Java.

// 4. **Особенности языка программирования Java:**
//    - Что такое "байт-код" в контексте Java, и каково его значение для языка?
// Байт-код позволяет коду работать на разных платформах.

// 5. **Шаги установки необходимых программ для Java:**
//    - Какие шаги нужно предпринять для установки Java Development Kit (JDK) и среды разработки (IDE)?
//

// 6. **Шаги написания первой программы на Java:**
//    - Напишите программу "Hello World" на Java и объясните каждый шаг создания этой программы.
// public class HelloWorld{
//     public static void main(String[] args){
//         System.out.printIn('Hello World!')
//     }
// }

// 7. **Шаги компиляции кода на Java:**
//    - Какие этапы нужно пройти для компиляции Java-кода с использованием компилятора `javac`?
// Написать javac и рядом название файла

// 8. **Шаги выполнения кода на Java:**
//    - Как можно выполнить скомпилированную Java-программу с использованием команды `java`?
// Написать java HelloWorld

// 9. **Способы вывода информации в консоль на Java:**
//    - Приведите примеры кода на Java для вывода информации в консоль различными способами.
// public class HelloWorld{
//     public static void main(String[] args){
//          System.out.print('Hello World!')
//          System.out.printIn('Hello World!')
//     }
// }

// 10. **Java (Garbage Collection) подробно:**
//     - Как работает сборщик мусора в Java, и почему это важно для управления памятью?
// Сборщик мусора удаляет неиспользуемые объекты и освобождает место в памяти.

// 11. **Использование комментариев в Java:**
//     - Приведите примеры однострочных и многострочных комментариев в Java.
//сус
/*
сус
сус
сус
*/

// 12. **Main метод в Java подробно:**
//     - Почему метод `main` является ключевым для выполнения Java-программы? Как он объявляется?
// public static void main(String[] args)

// 13. **Java (Command Line Arguments) подробно:**
//     - Как передавать аргументы командной строки в программу Java через метод `main`?
//String[] args

// 14. **Java JDK, JRE и JVM подробно:**
//     - Какие функции выполняют JDK, JRE и JVM в Java?
//Инструменты для разработки, инструменты для выполнения программ, виртуальная машина для компиляции кода на разных платформах соответственно.

// 15. **Платформы Java (Java SE, Java EE, Java ME) подробно:**
//     - В чем различия между Java SE, Java EE и Java ME?
//Java SE - стандартные, Java EE - корпоративные, а Java ME - программы для телефонов.

// 16. **Classpath в Java подробно:**
//     - Что представляет собой Classpath в Java и как он используется для поиска классов?
//Classpath - инструмент для поиска классов
//Не знаю

// 17. **Ввод информации в программу с использованием Scanner в Java:**
//     - Напишите программу на Java, использующую класс Scanner для ввода информации от пользователя.
// import java.util.scanner

// public class inputExample{
//     public static void main(String[] args){
//         Scanner scanner = newScanner(system.in)
//         System.out.print('Enter sth')
//         String userInput = scanner.nextLine()
//         System.out.printIn('You have entered: ' + userInput)
//         scanner.close()
//     }
// }

// 18. **Ввод информации в программу с использованием JOptionPane в Java:**
//     - Создайте графический интерфейс с использованием JOptionPane для ввода информации в программу.
//import javax.swing.JOptionPane

// public class InputExampleJOptionPane{
//     public static void main(String[] args){
//         String userInput = JOptionPane.showInputDialog('Enter sth')
//         JOptionPane.showMessageDialog(null, 'You have entered: ' + userInput)
//     }
// }